module device_to_wrap(
  input wire [31:0] in,
  output wire [31:0] out
);
  assign out = in;
endmodule
`include "xls/contrib/ice40/uncore_rtl/ice40/uart_receiver.v"
`include "xls/contrib/ice40/uncore_rtl/ice40/uart_transmitter.v"
module input_resetter(
  input wire clk,
  input wire [7:0] byte_in,
  output wire byte_in_ready,
  input wire byte_in_valid,
  input wire rst_n_in,
  output wire rst_n_out
);
  localparam ResetControlCode = 8'hfe;

  // reset_fsm FSM:
  localparam StateBits = 1;
  localparam
    StateIdle = 0,
    StateReset = 1;
  reg [StateBits - 1:0] state = StateIdle;
  reg [StateBits - 1:0] state_next = StateIdle;
  reg rst_n_reg = 1;
  reg byte_in_ready_reg = 0;

  // FSM state transition logic.
  always @ (*) begin
    state_next = state;
    case (state)
      StateIdle: begin
        if (byte_in_valid && byte_in == ResetControlCode) begin
          state_next = StateReset;
        end
      end
      StateReset: begin
        state_next = StateIdle;
      end
    endcase
  end

  // FSM output logic.
  always @ (*) begin
    case (state)
      StateIdle: begin
        rst_n_reg = 1;
        byte_in_ready_reg = 0;
      end
      StateReset: begin
        byte_in_ready_reg = 1;
        rst_n_reg = 0;
      end
    endcase
  end
  always @ (posedge clk) begin
    if (!rst_n_in) begin
      state <= StateIdle;
    end else begin
      state <= state_next;
    end
  end
  assign byte_in_ready = byte_in_ready_reg;
  assign rst_n_out = rst_n_in && rst_n_reg;
endmodule
module input_shifter(
  input wire clk,
  input wire clear,
  input wire [7:0] byte_in,
  input wire write_en,
  output wire [31:0] data_out,
  output wire done
);
  localparam TotalInputBytes = 4;
  reg [31:0] data;
  reg [31:0] data_next;
  reg [2:0] byte_countdown;
  reg [2:0] byte_countdown_next;
  always @ (*) begin
    if (clear) begin
      byte_countdown_next = TotalInputBytes;
    end else if (write_en) begin
      data_next = data << 8 | byte_in;
      byte_countdown_next = byte_countdown - 1;
    end else begin
      byte_countdown_next = byte_countdown;
      data_next = data;
    end
  end
  always @ (posedge clk) begin
    data <= data_next;
    byte_countdown <= byte_countdown_next;
  end
  assign done = byte_countdown == 0;
  assign data_out = data;
endmodule
module escape_decoder(
  input wire [7:0] byte_in,
  output wire [7:0] byte_out,
  input wire is_escaped
);
  localparam EscapedResetByte = 8'h00;
  localparam EscapedEscapedByte = 8'h00;
  localparam ResetControlCode = 8'hfe;
  localparam EscapeControlCode = 8'hff;
  reg [7:0] byte_out_reg;
  always @ (*) begin
    if (is_escaped && byte_in == EscapedResetByte) begin
      byte_out_reg = ResetControlCode;
    end else if (is_escaped && byte_in == EscapedEscapedByte) begin
      byte_out_reg = EscapeControlCode;
    end else begin
      byte_out_reg = byte_in;
    end
  end
  assign byte_out = byte_out_reg;
endmodule
module input_controller(
  input wire clk,
  input wire [7:0] byte_in,
  input wire byte_in_valid,
  output wire byte_in_ready,
  output wire [31:0] data_out,
  input wire data_out_ready,
  output wire data_out_valid,
  input wire rst_n_in,
  output wire rst_n_out
);
  wire reset_fsm_byte_in_ready;
  input_resetter resetter (
    .clk(clk),
    .byte_in(byte_in),
    .byte_in_valid(byte_in_valid),
    .byte_in_ready(reset_fsm_byte_in_ready),
    .rst_n_in(rst_n_in),
    .rst_n_out(rst_n_out)
  );
  reg shifter_clear = 1'h1;
  wire [7:0] shifter_byte_in;
  reg shifter_write_en = 1'h0;
  wire shifter_done;
  input_shifter shifter (
    .clk(clk),
    .clear(shifter_clear),
    .byte_in(shifter_byte_in),
    .write_en(shifter_write_en),
    .data_out(data_out),
    .done(shifter_done)
  );

  // rx_fsm FSM:
  localparam StateBits = 2;
  localparam
    StateInit = 0,
    StateIdle = 1,
    StateInputValid = 2,
    StateDataDone = 3;
  reg [StateBits - 1:0] state = StateInit;
  reg [StateBits - 1:0] state_next = StateInit;
  reg data_out_valid_reg = 0;
  reg byte_in_ready_reg = 0;
  reg is_escaped = 0;
  reg is_escaped_next;

  // FSM state transition logic.
  always @ (*) begin
    state_next = state;
    case (state)
      StateInit: begin
        state_next = StateIdle;
      end
      StateIdle: begin
        if (shifter_done) begin
          state_next = StateDataDone;
        end else if (byte_in_valid) begin
          state_next = StateInputValid;
        end
      end
      StateInputValid: begin
        state_next = StateIdle;
      end
      StateDataDone: begin
        if (data_out_ready) begin
          state_next = StateInit;
        end
      end
    endcase
  end

  // FSM output logic.
  always @ (*) begin
    is_escaped_next = is_escaped;
    case (state)
      StateInit: begin
        shifter_clear = 1;
        shifter_write_en = 0;
        data_out_valid_reg = 0;
        byte_in_ready_reg = 0;
      end
      StateIdle: begin
        shifter_clear = 0;
        shifter_write_en = 0;
        data_out_valid_reg = 0;
        byte_in_ready_reg = 0;
      end
      StateInputValid: begin
        byte_in_ready_reg = 1;
        shifter_clear = 0;
        data_out_valid_reg = 0;
        if (!is_escaped && byte_in == 8'hff) begin
          is_escaped_next = 1;
          shifter_write_en = 0;
        end else begin
          is_escaped_next = 0;
          shifter_write_en = 1;
        end
      end
      StateDataDone: begin
        data_out_valid_reg = 1;
        shifter_clear = 0;
        shifter_write_en = 0;
        byte_in_ready_reg = 0;
      end
    endcase
  end
  always @ (posedge clk) begin
    if (!rst_n_out) begin
      state <= StateInit;
      is_escaped <= 0;
    end else begin
      state <= state_next;
      is_escaped <= is_escaped_next;
    end
  end
  assign data_out_valid = data_out_valid_reg;
  assign byte_in_ready = byte_in_ready_reg || reset_fsm_byte_in_ready;
  escape_decoder decoder (
    .byte_in(byte_in),
    .byte_out(shifter_byte_in),
    .is_escaped(is_escaped)
  );
endmodule
module output_controller(
  input wire clk,
  input wire rst_n,
  input wire [31:0] data_in,
  input wire data_in_valid,
  output wire data_in_ready,
  output wire [7:0] byte_out,
  input wire byte_out_ready,
  output wire byte_out_valid
);
  // output_controller FSM:
  localparam StateBits = 2;
  localparam
    StateIdle = 0,
    StateShifting = 1,
    StateValid = 2,
    StateHoldingData = 3;
  reg [StateBits - 1:0] state = StateIdle;
  reg [StateBits - 1:0] state_next = StateIdle;
  reg data_in_ready_reg = 0;
  reg byte_out_valid_reg = 0;
  reg [31:0] shift_out_reg;
  reg [31:0] shift_out_reg_next;
  reg [2:0] byte_counter;
  reg [2:0] byte_counter_next;

  // FSM state transition logic.
  always @ (*) begin
    state_next = state;
    case (state)
      StateIdle: begin
        if (data_in_valid) begin
          state_next = StateShifting;
        end
      end
      StateShifting: begin
        if (byte_counter == 0) begin
          state_next = StateIdle;
        end else begin
          state_next = StateValid;
        end
      end
      StateValid: begin
        if (byte_out_ready) begin
          state_next = StateHoldingData;
        end
      end
      StateHoldingData: begin
        state_next = StateShifting;
      end
    endcase
  end

  // FSM output logic.
  always @ (*) begin
    shift_out_reg_next = shift_out_reg;
    byte_counter_next = byte_counter;
    case (state)
      StateIdle: begin
        data_in_ready_reg = 1;
        byte_out_valid_reg = 0;
        if (data_in_valid) begin
          shift_out_reg_next = data_in;
          byte_counter_next = 4;
        end
      end
      StateShifting: begin
        data_in_ready_reg = 0;
        if (byte_counter == 0) begin
          byte_out_valid_reg = 0;
        end else begin
          byte_out_valid_reg = 1;
        end
      end
      StateValid: begin
        byte_out_valid_reg = 1;
        data_in_ready_reg = 0;
      end
      StateHoldingData: begin
        byte_out_valid_reg = 0;
        shift_out_reg_next = shift_out_reg >> 8;
        byte_counter_next = byte_counter - 1;
        data_in_ready_reg = 0;
      end
    endcase
  end
  always @ (posedge clk) begin
    if (!rst_n) begin
      state <= StateIdle;
    end else begin
      state <= state_next;
      shift_out_reg <= shift_out_reg_next;
      byte_counter <= byte_counter_next;
    end
  end
  assign byte_out = shift_out_reg[7:0];
  assign byte_out_valid = byte_out_valid_reg;
  assign data_in_ready = data_in_ready_reg;
endmodule
module io_wrapper(
  input wire clk,
  input wire rx_in,
  output wire tx_out,
  output wire clear_to_send_out_n
);
  wire rst_n;
  wire clear_to_send;
  assign clear_to_send_out_n = !clear_to_send;
  parameter ClocksPerBaud = `DEFAULT_CLOCKS_PER_BAUD;
  wire [7:0] rx_byte;
  wire rx_byte_valid;
  wire rx_byte_done;
  wire [7:0] tx_byte;
  wire tx_byte_valid;
  wire tx_byte_ready;
  uart_receiver #(
    .ClocksPerBaud(ClocksPerBaud)
  ) rx (
    .clk(clk),
    .rst_n(rst_n),
    .rx(rx_in),
    .rx_byte_out(rx_byte),
    .rx_byte_valid_out(rx_byte_valid),
    .rx_byte_done(rx_byte_done),
    .clear_to_send_out(clear_to_send)
  );
  uart_transmitter #(
    .ClocksPerBaud(ClocksPerBaud)
  ) tx (
    .clk(clk),
    .rst_n(rst_n),
    .tx_byte(tx_byte),
    .tx_byte_valid(tx_byte_valid),
    .tx_byte_done_out(tx_byte_ready),
    .tx_out(tx_out)
  );
  wire [31:0] flat_input;
  wire flat_input_valid;
  wire flat_input_ready;
  input_controller input_controller (
    .clk(clk),
    .byte_in(rx_byte),
    .byte_in_valid(rx_byte_valid),
    .byte_in_ready(rx_byte_done),
    .data_out(flat_input),
    .data_out_valid(flat_input_valid),
    .data_out_ready(flat_input_ready),
    .rst_n_in(1'h1),
    .rst_n_out(rst_n)
  );
  wire [31:0] flat_output;
  wire flat_output_valid;
  wire flat_output_ready;
  output_controller output_controller (
    .clk(clk),
    .rst_n(rst_n),
    .data_in(flat_output),
    .data_in_valid(flat_output_valid),
    .data_in_ready(flat_output_ready),
    .byte_out(tx_byte),
    .byte_out_valid(tx_byte_valid),
    .byte_out_ready(tx_byte_ready)
  );

  // fixed_latency_fsm FSM:
  localparam StateBits = 2;
  localparam
    StateIdle = 0,
    StateComputing = 1,
    StateDone = 2;
  reg [StateBits - 1:0] state = StateIdle;
  reg [StateBits - 1:0] state_next = StateIdle;
  reg input_ready_reg = 0;
  reg output_valid_reg = 0;
  reg cycle_counter;
  reg cycle_counter_next;

  // FSM state transition logic.
  always @ (*) begin
    state_next = state;
    case (state)
      StateIdle: begin
        if (flat_input_valid && flat_output_ready) begin
          state_next = StateComputing;
        end
      end
      StateComputing: begin
        if (cycle_counter == 0) begin
          state_next = StateDone;
        end
      end
      StateDone: begin
        state_next = StateIdle;
      end
      default: begin
        state_next = 2'dx;
      end
    endcase
  end

  // FSM output logic.
  always @ (*) begin
    cycle_counter_next = cycle_counter - 1;
    case (state)
      StateIdle: begin
        input_ready_reg = 0;
        output_valid_reg = 0;
        if (flat_input_valid && flat_output_ready) begin
          cycle_counter_next = 0;
        end
      end
      StateComputing: begin
        input_ready_reg = 0;
        output_valid_reg = 0;
      end
      StateDone: begin
        input_ready_reg = 1;
        output_valid_reg = 1;
      end
      default: begin
        input_ready_reg = 0;
        output_valid_reg = 0;
      end
    endcase
  end
  always @ (posedge clk) begin
    if (!rst_n) begin
      state <= StateIdle;
    end else begin
      state <= state_next;
      cycle_counter <= cycle_counter_next;
    end
  end
  assign flat_input_ready = input_ready_reg;
  assign flat_output_valid = output_valid_reg;
  device_to_wrap device_function (
    .in(flat_input),
    .out(flat_output)
  );
endmodule
