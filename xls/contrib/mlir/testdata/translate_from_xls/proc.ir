// RUN: xls_translate --xls-to-mlir-xls %s 2>&1 | FileCheck %s

package simple_proc

file_number 0 "./simple_proc.x"

// CHECK-LABEL: xls.chan @ch_inp {send_supported = false} : i32
chan ch_inp(bits[32], id=0, kind=streaming, ops=receive_only)

// CHECK-LABEL: xls.chan @ch_out {
// CHECK-SAME:    fifo_config = #xls.fifo_config<fifo_depth = 1, bypass = true, register_push_outputs = true, register_pop_outputs = false>,
// CHECK-SAME:    input_flop_kind = #xls<flop_kind zero-latency>,
// CHECK-SAME:    output_flop_kind = #xls<flop_kind skid>
// CHECK-SAME:    recv_supported = false
// CHECK-SAME:  } : i32
chan ch_out(bits[32], id=1, kind=streaming, ops=send_only, flow_control=ready_valid, strictness=proven_mutually_exclusive, fifo_depth=1, bypass=true, register_push_outputs=true, register_pop_outputs=false, input_flop_kind=zero_latency, output_flop_kind=skid)

// CHECK-LABEL: xls.eproc @ident() zeroinitializer {
// CHECK:         xls.yield
// CHECK:       }
top proc ident() {
  after_all.4: token = after_all(id=4)
  receive.15: (token, bits[32]) = receive(after_all.4, channel=ch_inp, id=15)
  tok: token = tuple_index(receive.15, index=0, id=7)
  val: bits[32] = tuple_index(receive.15, index=1, id=8)
  send.16: token = send(tok, val, channel=ch_out, id=16)
}
