package test_module_package

file_number 0 "test_module.x"

fn __itok__test_module__f(__token: token id=1, __activated: bits[1] id=2) -> (token, ()) {
  literal.4: bits[32] = literal(value=31, id=4, pos=[(0,1,26)])
  literal.5: bits[32] = literal(value=1, id=5, pos=[(0,1,35)])
  literal.14: bits[32] = literal(value=31, id=14, pos=[(0,2,26)])
  literal.15: bits[32] = literal(value=1, id=15, pos=[(0,2,35)])
  literal.23: bits[32] = literal(value=31, id=23, pos=[(0,3,26)])
  literal.24: bits[32] = literal(value=1, id=24, pos=[(0,3,35)])
  literal.3: bits[32] = literal(value=42, id=3, pos=[(0,1,16)])
  add.6: bits[32] = add(literal.4, literal.5, id=6, pos=[(0,1,26)])
  literal.13: bits[32] = literal(value=42, id=13, pos=[(0,2,18)])
  add.16: bits[32] = add(literal.14, literal.15, id=16, pos=[(0,2,26)])
  literal.22: bits[32] = literal(value=41, id=22, pos=[(0,3,18)])
  add.25: bits[32] = add(literal.23, literal.24, id=25, pos=[(0,3,26)])
  not.9: bits[1] = not(__activated, id=9)
  eq.7: bits[1] = eq(literal.3, add.6, id=7, pos=[(0,1,16)])
  not.18: bits[1] = not(__activated, id=18)
  eq.17: bits[1] = eq(literal.13, add.16, id=17)
  not.27: bits[1] = not(__activated, id=27)
  ult.26: bits[1] = ult(literal.22, add.25, id=26)
  or.10: bits[1] = or(not.9, eq.7, id=10)
  or.19: bits[1] = or(not.18, eq.17, id=19)
  or.28: bits[1] = or(not.27, ult.26, id=28)
  assert.11: token = assert(__token, or.10, message="Assertion failure via assert! @ test_module.x:2:16-2:49", label="foo", id=11)
  assert.20: token = assert(__token, or.19, message="Assertion failure via assert_eq @ test_module.x:3:18-3:42", label="assert_eq(u32:42, u32:31 + u32:1)", id=20)
  assert.29: token = assert(__token, or.28, message="Assertion failure via assert_lt @ test_module.x:4:18-4:42", label="assert_lt(u32:41, u32:31 + u32:1)", id=29)
  after_all.32: token = after_all(assert.11, assert.20, assert.29, id=32)
  tuple.31: () = tuple(id=31, pos=[(0,0,13)])
  literal.8: bits[8][3] = literal(value=[102, 111, 111], id=8, pos=[(0,1,42)])
  tuple.12: () = tuple(id=12)
  tuple.21: () = tuple(id=21)
  tuple.30: () = tuple(id=30)
  ret tuple.33: (token, ()) = tuple(after_all.32, tuple.31, id=33)
}

top fn __test_module__f() -> () {
  after_all.34: token = after_all(id=34)
  literal.35: bits[1] = literal(value=1, id=35)
  invoke.36: (token, ()) = invoke(after_all.34, literal.35, to_apply=__itok__test_module__f, id=36)
  ret tuple_index.37: () = tuple_index(invoke.36, index=1, id=37)
}
