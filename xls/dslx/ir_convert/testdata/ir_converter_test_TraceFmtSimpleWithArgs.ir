package test_module

file_number 0 "test_module.x"

fn __itok__test_module__main(__token: token id=1, __activated: bits[1] id=2) -> (token, ()) {
  literal.4: bits[8][5] = literal(value=[119, 111, 114, 108, 100], id=4)
  literal.7: bits[32] = literal(value=0, id=7)
  literal.9: bits[32] = literal(value=1, id=9)
  literal.11: bits[32] = literal(value=2, id=11)
  literal.13: bits[32] = literal(value=3, id=13)
  literal.15: bits[32] = literal(value=4, id=15)
  foo: bits[32] = literal(value=2, id=3)
  literal.5: bits[32] = literal(value=1, id=5)
  array_index.8: bits[8] = array_index(literal.4, indices=[literal.7], id=8)
  array_index.10: bits[8] = array_index(literal.4, indices=[literal.9], id=10)
  array_index.12: bits[8] = array_index(literal.4, indices=[literal.11], id=12)
  array_index.14: bits[8] = array_index(literal.4, indices=[literal.13], id=14)
  array_index.16: bits[8] = array_index(literal.4, indices=[literal.15], id=16)
  add.6: bits[32] = add(foo, literal.5, id=6)
  trace.17: token = trace(__token, __activated, format="Hello [{}, {}, {}, {}, {}] {:x}!", data_operands=[array_index.8, array_index.10, array_index.12, array_index.14, array_index.16, add.6], id=17)
  after_all.19: token = after_all(trace.17, id=19)
  tuple.18: () = tuple(id=18)
  ret tuple.20: (token, ()) = tuple(after_all.19, tuple.18, id=20)
}

fn __test_module__main() -> () {
  after_all.21: token = after_all(id=21)
  literal.22: bits[1] = literal(value=1, id=22)
  invoke.23: (token, ()) = invoke(after_all.21, literal.22, to_apply=__itok__test_module__main, id=23)
  ret tuple_index.24: () = tuple_index(invoke.23, index=1, id=24)
}
