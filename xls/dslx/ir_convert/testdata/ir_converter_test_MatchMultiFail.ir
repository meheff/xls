package test_module

file_number 0 "test_module.x"

fn __itok__test_module__main(__token: token id=1, __activated: bits[1] id=2, x: bits[32] id=3) -> (token, bits[32]) {
  literal.4: bits[32] = literal(value=42, id=4)
  eq.5: bits[1] = eq(literal.4, x, id=5)
  literal.7: bits[1] = literal(value=1, id=7)
  not.16: bits[1] = not(eq.5, id=16)
  and.8: bits[1] = and(__activated, literal.7, eq.5, id=8)
  and.17: bits[1] = and(__activated, not.16, id=17)
  literal.14: bits[32] = literal(value=1, id=14)
  not.9: bits[1] = not(and.8, id=9)
  not.18: bits[1] = not(and.17, id=18)
  add.15: bits[32] = add(x, literal.14, id=15)
  assert.10: token = assert(__token, not.9, message="Assertion failure via fail! @ test_module.x:4:20-4:36", label="failure_0", id=10)
  assert.19: token = assert(__token, not.18, message="Assertion failure via fail! @ test_module.x:5:15-5:37", label="failure_1", id=19)
  concat.21: bits[1] = concat(eq.5, id=21)
  identity.11: bits[32] = identity(x, id=11)
  identity.20: bits[32] = identity(add.15, id=20)
  after_all.23: token = after_all(assert.10, assert.19, id=23)
  priority_sel.22: bits[32] = priority_sel(concat.21, cases=[identity.11], default=identity.20, id=22)
  literal.6: bits[8][9] = literal(value=[102, 97, 105, 108, 117, 114, 101, 95, 48], id=6)
  literal.12: bits[1] = literal(value=1, id=12)
  literal.13: bits[8][9] = literal(value=[102, 97, 105, 108, 117, 114, 101, 95, 49], id=13)
  ret tuple.24: (token, bits[32]) = tuple(after_all.23, priority_sel.22, id=24)
}

fn __test_module__main(x: bits[32] id=25) -> bits[32] {
  after_all.26: token = after_all(id=26)
  literal.27: bits[1] = literal(value=1, id=27)
  invoke.28: (token, bits[32]) = invoke(after_all.26, literal.27, x, to_apply=__itok__test_module__main, id=28)
  ret tuple_index.29: bits[32] = tuple_index(invoke.28, index=1, id=29)
}
