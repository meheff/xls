package test_module

file_number 0 "test_module.x"

fn ____itok__test_module__main_counted_for_0_body(i: bits[32] id=5, __token_wrapped: (token, bits[1], bits[32]) id=8) -> (token, bits[1], bits[32]) {
  tuple_index.10: bits[1] = tuple_index(__token_wrapped, index=1, id=10)
  tuple_index.9: token = tuple_index(__token_wrapped, index=0, id=9)
  not.13: bits[1] = not(tuple_index.10, id=13)
  assert.14: token = assert(tuple_index.9, not.13, message="Assertion failure via fail! @ test_module.x:4:10-4:24", label="failure", id=14)
  tuple_index.11: bits[32] = tuple_index(__token_wrapped, index=2, id=11)
  literal.6: bits[32] = literal(value=0, id=6)
  after_all.16: token = after_all(assert.14, tuple_index.9, id=16)
  identity.15: bits[32] = identity(tuple_index.11, id=15)
  add.7: bits[32] = add(i, literal.6, id=7)
  literal.12: bits[8][7] = literal(value=[102, 97, 105, 108, 117, 114, 101], id=12)
  ret tuple.17: (token, bits[1], bits[32]) = tuple(after_all.16, tuple_index.10, identity.15, id=17)
}

fn __itok__test_module__main(__token: token id=1, __activated: bits[1] id=2, x: bits[32] id=3) -> (token, bits[32]) {
  literal.4: bits[32] = literal(value=0, id=4)
  tuple.18: (token, bits[1], bits[32]) = tuple(__token, __activated, literal.4, id=18)
  counted_for.19: (token, bits[1], bits[32]) = counted_for(tuple.18, trip_count=1, stride=1, body=____itok__test_module__main_counted_for_0_body, id=19)
  tuple_index.20: token = tuple_index(counted_for.19, index=0, id=20)
  after_all.22: token = after_all(tuple_index.20, id=22)
  tuple_index.21: bits[32] = tuple_index(counted_for.19, index=2, id=21)
  ret tuple.23: (token, bits[32]) = tuple(after_all.22, tuple_index.21, id=23)
}
