package test_module

file_number 0 "test_module.x"

fn __itok__test_module__main(__token: token id=1, __activated: bits[1] id=2, x: bits[32] id=3) -> (token, bits[32]) {
  literal.4: bits[32] = literal(value=42, id=4)
  literal.7: bits[1] = literal(value=1, id=7)
  eq.5: bits[1] = eq(literal.4, x, id=5)
  and.8: bits[1] = and(__activated, literal.7, eq.5, id=8)
  not.9: bits[1] = not(and.8, id=9)
  assert.10: token = assert(__token, not.9, message="Assertion failure via fail! @ test_module.x:4:20-4:34", label="failure", id=10)
  concat.13: bits[1] = concat(eq.5, id=13)
  identity.11: bits[32] = identity(x, id=11)
  after_all.15: token = after_all(assert.10, id=15)
  priority_sel.14: bits[32] = priority_sel(concat.13, cases=[identity.11], default=x, id=14)
  literal.6: bits[8][7] = literal(value=[102, 97, 105, 108, 117, 114, 101], id=6)
  literal.12: bits[1] = literal(value=1, id=12)
  ret tuple.16: (token, bits[32]) = tuple(after_all.15, priority_sel.14, id=16)
}

fn __test_module__main(x: bits[32] id=17) -> bits[32] {
  after_all.18: token = after_all(id=18)
  literal.19: bits[1] = literal(value=1, id=19)
  invoke.20: (token, bits[32]) = invoke(after_all.18, literal.19, x, to_apply=__itok__test_module__main, id=20)
  ret tuple_index.21: bits[32] = tuple_index(invoke.20, index=1, id=21)
}
