module neg_proc(
  input wire clk,
  input wire rst,
  input wire [31:0] in,
  input wire in_vld,
  input wire out_rdy,
  output wire [31:0] out,
  output wire out_vld,
  output wire in_rdy,
  output wire idle
);
  reg [31:0] __in_reg;
  reg __in_valid_reg;
  reg [31:0] __out_reg;
  reg __out_valid_reg;
  wire out_valid_inv;
  wire out_valid_load_en;
  wire out_load_en;
  wire p0_stage_done;
  wire in_valid_inv;
  wire in_valid_load_en;
  wire in_load_en;
  wire [31:0] negate;
  assign out_valid_inv = ~__out_valid_reg;
  assign out_valid_load_en = out_rdy | out_valid_inv;
  assign out_load_en = __in_valid_reg & out_valid_load_en;
  assign p0_stage_done = __in_valid_reg & out_load_en;
  assign in_valid_inv = ~__in_valid_reg;
  assign in_valid_load_en = p0_stage_done | in_valid_inv;
  assign in_load_en = in_vld & in_valid_load_en;
  assign negate = -__in_reg;
  always_ff @ (posedge clk) begin
    if (rst) begin
      __in_reg <= 32'h0000_0000;
      __in_valid_reg <= 1'h0;
      __out_reg <= 32'h0000_0000;
      __out_valid_reg <= 1'h0;
    end else begin
      __in_reg <= in_load_en ? in : __in_reg;
      __in_valid_reg <= in_valid_load_en ? in_vld : __in_valid_reg;
      __out_reg <= out_load_en ? negate : __out_reg;
      __out_valid_reg <= out_valid_load_en ? __in_valid_reg : __out_valid_reg;
    end
  end
  assign out = __out_reg;
  assign out_vld = __out_valid_reg;
  assign in_rdy = in_load_en;
  assign idle = ~(__in_valid_reg | __out_valid_reg | in_vld);
endmodule
