// Copyright 2020 The XLS Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package xls.viz;

message Edge {
  // Note: Numbers are stored as double, because if they are declared as int64
  // they are serialized as JSON strings (because Javascript numbers are
  // doubles and can't represent the whole int64 range).
  optional double bit_width = 1;

  // A globally unique identifier for the edge.
  optional string id = 2;

  // The xls::viz::Node::id value of the source node.
  optional string source_id = 3;

  // The xls::viz::Node::id value of the target node.
  optional string target_id = 4;

  // The xls::Type::ToString of the type of the source node
  optional string type = 5;

  // Whether the edge is on the critical path.
  optional bool on_critical_path = 6;
}

message NodeAttributes {
  optional string value = 1;
  optional double start = 2;
  optional double width = 3;
  optional double index = 4;
  optional double delay_ps = 5;
  optional bool lsb_prio = 12;
  optional int64 new_bit_count = 13;
  optional string channel = 14;
  optional bool blocking = 15;
  optional string to_apply = 16;
  optional string known_bits = 6;
  optional bool on_critical_path = 7;
  optional int64 trip_count = 17;
  optional int64 stride = 18;
  optional string body = 19;
  optional bool has_default = 20;
  optional int64 delay = 21;
  optional string message_ = 22;
  optional string label = 23;
  optional string format = 24;
  optional int64 verbosity = 25;
  optional string name = 26;
  optional string register_ = 27;
  optional bool has_load_enable = 28;
  optional bool has_reset = 29;
  optional string instantiation = 30;
  optional string port_name = 31;

  optional double cycle = 8;
  // If this node is a state parameter of a proc these fields hold the index
  // and initial value.
  optional double state_param_index = 9;
  optional string initial_value = 10;
  optional double area_um = 11;

  // If present the interval-set of the node.
  optional string ranges = 32;
}

message SourceLocation {
  optional string file = 1;
  optional int64 line = 2;
  optional int64 column = 3;
}

message Node {
  optional NodeAttributes attributes = 1;

  // A globally unique identifier for the node. This is *not* the
  // xls::Node::id() as this is value is not globally unique because parameter
  // ids are not unique.
  optional string id = 2;

  // The xls::Node::ToString() output for this node.
  optional string ir = 3;
  optional string name = 4;
  optional string opcode = 5;

  repeated SourceLocation loc = 6;
}

message FunctionBase {
  optional string name = 1;

  // A globally unique identifier for the function/proc/block.
  optional string id = 2;

  // The kind of function base ('function', 'proc', or 'block').
  optional string kind = 3;

  // The edges and nodes of the data flow graph.
  repeated Edge edges = 4;
  repeated Node nodes = 5;
}

message Package {
  optional string name = 1;
  repeated FunctionBase function_bases = 2;
  optional string ir_html = 3;

  // Id of the function/proc/block to view by default.
  optional string entry_id = 4;
}
