module SplitOutputs(
  input wire clk,
  input wire [7:0] x,
  input wire [7:0] y,
  output wire [7:0] out_0,
  output wire [7:0] out_1,
  output wire [7:0] out_2
);
  // ===== Pipe stage 0:

  // Registers for pipe stage 0:
  reg [7:0] p0_x;
  reg [7:0] p0_y;
  always @ (posedge clk) begin
    p0_x <= x;
    p0_y <= y;
  end

  // ===== Pipe stage 1:
  wire [7:0] p1_add_3_comb;
  assign p1_add_3_comb = p0_x + p0_y;

  // Registers for pipe stage 1:
  reg [7:0] p1_x;
  reg [7:0] p1_y;
  reg [7:0] p1_add_3;
  always @ (posedge clk) begin
    p1_x <= p0_x;
    p1_y <= p0_y;
    p1_add_3 <= p1_add_3_comb;
  end

  // ===== Pipe stage 2:
  wire [23:0] p2_tuple_4_comb;
  assign p2_tuple_4_comb = {p1_x, p1_y, p1_add_3};

  // Registers for pipe stage 2:
  reg [23:0] p2_tuple_4;
  always @ (posedge clk) begin
    p2_tuple_4 <= p2_tuple_4_comb;
  end
  assign out_0 = p2_tuple_4[23:16];
  assign out_1 = p2_tuple_4[15:8];
  assign out_2 = p2_tuple_4[7:0];
endmodule
