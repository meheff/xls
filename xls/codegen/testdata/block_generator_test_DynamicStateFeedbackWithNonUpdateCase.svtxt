module pipelined_proc(
  input wire clk,
  input wire rst,
  input wire out_ready,
  output wire [31:0] out_data,
  output wire out_valid
);
  reg [31:0] __counter;
  reg __odd_iteration;
  reg [31:0] p0___counter__1;
  reg p0_even_iteration;
  reg __counter_full;
  reg p0_valid;
  reg [31:0] __out_data_reg;
  reg __out_data_valid_reg;
  wire p1_all_active_states_valid;
  wire p1_stage_valid;
  wire p1_all_active_inputs_valid;
  wire p1_all_active_outputs_ready;
  wire p1_stage_done;
  wire p1_not_valid;
  wire p0_all_active_inputs_valid;
  wire p0_enable;
  wire out_data_valid_inv;
  wire __out_valid_buf;
  wire out_data_valid_load_en;
  wire out_data_load_en;
  wire p0_stage_done;
  wire p0_data_enable;
  wire and_1052;
  wire [31:0] lit1;
  wire or_1054;
  wire even_iteration;
  wire [31:0] incremented_counter;
  wire or_1055;
  assign p1_all_active_states_valid = 1'h1;
  assign p1_stage_valid = p1_all_active_states_valid & p0_valid;
  assign p1_all_active_inputs_valid = 1'h1;
  assign p1_all_active_outputs_ready = 1'h1;
  assign p1_stage_done = p1_stage_valid & p1_all_active_inputs_valid & p1_all_active_outputs_ready;
  assign p1_not_valid = ~p0_valid;
  assign p0_all_active_inputs_valid = 1'h1;
  assign p0_enable = p1_stage_done | p1_not_valid;
  assign out_data_valid_inv = ~__out_data_valid_reg;
  assign __out_valid_buf = p0_all_active_inputs_valid & __counter_full & p0_enable;
  assign out_data_valid_load_en = out_ready | out_data_valid_inv;
  assign out_data_load_en = __out_valid_buf & out_data_valid_load_en;
  assign p0_stage_done = __counter_full & p0_all_active_inputs_valid & out_data_load_en;
  assign p0_data_enable = p0_enable & p0_stage_done;
  assign and_1052 = p0_even_iteration & p1_stage_done;
  assign lit1 = 32'h0000_0001;
  assign or_1054 = __odd_iteration & p0_data_enable | and_1052;
  assign even_iteration = ~__odd_iteration;
  assign incremented_counter = p0___counter__1 + lit1;
  assign or_1055 = p0_data_enable | or_1054;
  always_ff @ (posedge clk) begin
    if (rst) begin
      __counter <= 32'h0000_0000;
      __odd_iteration <= 1'h0;
      p0___counter__1 <= 32'h0000_0000;
      p0_even_iteration <= 1'h0;
      __counter_full <= 1'h1;
      p0_valid <= 1'h0;
      __out_data_reg <= 32'h0000_0000;
      __out_data_valid_reg <= 1'h0;
    end else begin
      __counter <= and_1052 ? incremented_counter : __counter;
      __odd_iteration <= p0_data_enable ? even_iteration : __odd_iteration;
      p0___counter__1 <= p0_data_enable ? __counter : p0___counter__1;
      p0_even_iteration <= p0_data_enable ? even_iteration : p0_even_iteration;
      __counter_full <= or_1055 ? or_1054 : __counter_full;
      p0_valid <= p0_enable ? p0_stage_done : p0_valid;
      __out_data_reg <= out_data_load_en ? __counter : __out_data_reg;
      __out_data_valid_reg <= out_data_valid_load_en ? __out_valid_buf : __out_data_valid_reg;
    end
  end
  assign out_data = __out_data_reg;
  assign out_valid = __out_data_valid_reg;
endmodule
