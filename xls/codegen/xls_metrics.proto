// Copyright 2022 The XLS Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package xls.verilog;

import "xls/ir/op.proto";

enum BomKindProto {
  BOM_KIND_INVALID = 0;
  // signed and unsigned adds and subtracts
  BOM_KIND_ADDER = 1;
  // signed and unsigned multiplies
  BOM_KIND_MULTIPLIER = 2;
  // signed and unsigned division and modulo
  BOM_KIND_DIVIDER = 3;
  // signed and unsigned comparison ops
  BOM_KIND_COMPARISON = 4;
  // n-ary bitwise and/or/xor/nand/nor/not
  BOM_KIND_BITWISE = 5;
  // and/or/xor reduce
  BOM_KIND_BITWISE_REDUCTION = 6;
  // ops that can be implemented via dynamic bit slicing:
  //
  // shll, shra, shrl, bit_slice_update, dynamic_bit_slice,
  // array_index, array_slice, array_update
  BOM_KIND_SLICE = 7;
  // select
  BOM_KIND_SELECT = 8;
  // one_hot_select
  BOM_KIND_ONE_HOT_SELECT = 9;
  // binary to one hot conversion
  BOM_KIND_DECODE = 10;
  // one hot to binary conversion
  BOM_KIND_ENCODE = 11;
  // many hot to one hot conversion (via "priority")
  BOM_KIND_ONE_HOT = 12;
  // nodes with insignificant or zero cost (not including wires), like negate or
  // bit_slice or reverse.
  BOM_KIND_INSIGNIFICANT = 13;
  // nodes that are not synthesizable or don't have a well defined notion of
  // cost when considered in isolation (e.g.: register write/read).
  BOM_KIND_MISC = 14;
  // priority_select
  BOM_KIND_PRIORITY_SELECT = 15;
}

message SourceLocationProto {
  // The relevant source file, if one exists.
  // It is possible for this to not exist even though `line` and `col` do exist.
  optional string file = 1;

  // The relevant line number, if one exists.
  // If this exists, `col` must exist.
  optional int64 line = 2;

  // The relevant column number, if one exists.
  // If this exists, `line` must exist.
  optional int64 col = 3;
}

message BomEntryProto {
  // The operation this node is an instance of.
  optional OpProto op = 1;

  // The kind of operation. These are categories that provide a useful
  // hint to people who want to know the cost of an operation.
  optional BomKindProto kind = 2;

  // The bitwidth of the output of this node.
  optional int64 output_width = 3;

  // The maximum bitwidth of all inputs of this node.
  // This is zero if the node has no inputs.
  // This is a more relevant measure of cost for some nodes, like multipliers.
  optional int64 maximum_input_width = 4;

  // The number of arguments of this node. Useful for measuring the cost of
  // n-ary operations (`BOM_KIND_BITWISE`).
  optional int64 number_of_arguments = 5;

  // The source locations from which this node was generated.
  repeated SourceLocationProto location = 6;
}

// Metrics collected for the block after block conversion completes.
message BlockMetricsProto {
  // The total number of registers (in bits) in the block.
  optional int64 flop_count = 1;

  // Whether the block has a combinational path from an input port to an output
  // port.
  optional bool feedthrough_path_exists = 2;

  // The name of the delay model used to generate the block.
  optional string delay_model = 3;

  // The maximum combinational delay in picoseconds of any path in the block
  // from the output of a register to the input of a register.
  optional int64 max_reg_to_reg_delay_ps = 4;

  // The maximum combinational delay in picoseconds of any path in the block
  // from an input port to a register.
  optional int64 max_input_to_reg_delay_ps = 5;

  // The maximum combinational delay in picoseconds of any path in the block
  // from a register to an output port.
  optional int64 max_reg_to_output_delay_ps = 6;

  // The maximum delay in picoseconds of any combinational path from an input
  // port to an output port.
  optional int64 max_feedthrough_path_delay_ps = 7;

  // A bill of materials enumerating the nodes and where they were generated
  // from (if that information is available).
  repeated BomEntryProto bill_of_materials = 8;
}

message XlsMetricsProto {
  optional BlockMetricsProto block_metrics = 1;
}
