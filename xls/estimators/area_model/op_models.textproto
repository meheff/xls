# Copyright 2024 The XLS Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# proto-file: xls/estimators/estimator_model.proto
# proto-message: xls.estimator_model.OpModels

# This is a generic op_models file for use with any process node.
# Since it is not process-node-specific, it doesn't contain
# "logical_effort" estimators, since the must specify "tau_in_ps".
# Also, any "fixed" estimators can only be used with value "0"
# i.e. free operations.

op_models {
  op: "kIdentity"
  estimator {
    area_regression {
    }
  }
}
op_models {
  op: "kNot"
  estimator {
    area_regression {
      expressions {
        factor { source: RESULT_BIT_COUNT }
      }
    }
  }
}
op_models {
  op: "kAnd"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}
op_models {
  op: "kNand"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}
op_models {
  op: "kOr"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}
op_models {
  op: "kNor"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}
op_models {
  op: "kXor"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}

op_models {
  op: "kAndReduce"
  estimator {
    area_regression {
      expressions {
        factor { source: OPERAND_BIT_COUNT operand_number: 0 }
      }
    }
  }
}
op_models {
  op: "kOrReduce"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}
op_models {
  op: "kXorReduce"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}
op_models {
  op: "kGate"
  estimator {
    area_regression {
      expressions {
        factor { source: RESULT_BIT_COUNT }
      }
    }
  }
}
op_models {
  op: "kEncode"
  estimator {
    area_regression {
      expressions {
        factor { source: OPERAND_BIT_COUNT operand_number: 0 }
      }
    }
  }
}

op_models {
  op: "kAdd"
  estimator {
    area_regression {
      expressions {
        factor {
          source: OPERAND_BIT_COUNT
          operand_number: 0
        }
      }
    }
  }
}
op_models {
  op: "kSub"
  estimator {
    area_regression {
      expressions {
        factor {
          source: OPERAND_BIT_COUNT
          operand_number: 0
        }
      }
    }
  }
}

op_models {
  op: "kNeg"
  estimator {
    area_regression {
      expressions {
        factor {
          source: OPERAND_BIT_COUNT
          operand_number: 0
        }
      }
    }
  }
}

op_models {
  op: "kSignExt"
  estimator {
    area_regression {
      expressions {
        bin_op: SUB
        lhs_expression {
          factor {
            source: RESULT_BIT_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
            operand_number: 0
          }
        }
      }
    }
  }
}

op_models {
  op: "kSel"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: RESULT_BIT_COUNT
          }
        }
      }
    }
  }
  specializations {
    # If the selector is literal, this will compile down to pure wires.
    kind: HAS_LITERAL_OPERAND
    details {
      literal_operand_details {
        required_literal_operand: 0
      }
    }
    estimator {
      fixed: 0
    }
  }
}

# Multiplier operators
op_models {
  op: "kUMul"
  estimator {
    area_regression {
      expressions {
        factor {
          source: RESULT_BIT_COUNT
        }
      }
    }
  }
  specializations {
    kind: OPERANDS_IDENTICAL
    estimator {
      area_regression {
        expressions {
          factor {
            source: OPERAND_BIT_COUNT
            operand_number: 0
          }
        }
      }
    }
  }
}
op_models {
  op: "kSMul"
  estimator {
    area_regression {
      expressions {
        factor {
          source: RESULT_BIT_COUNT
        }
      }
    }
  }
  specializations {
    kind: OPERANDS_IDENTICAL
    estimator {
      area_regression {
        expressions {
          factor {
            source: OPERAND_BIT_COUNT
            operand_number: 0
          }
        }
      }
    }
  }
}

op_models {
  op: "kUMulp"
  estimator {
    area_regression {
      expressions {
        factor {
          source: RESULT_BIT_COUNT
        }
      }
    }
  }
  specializations {
    kind: OPERANDS_IDENTICAL
    estimator {
      area_regression {
        expressions {
          factor {
            source: OPERAND_BIT_COUNT
            operand_number: 0
          }
        }
      }
    }
  }
}
op_models {
  op: "kSMulp"
  estimator {
    area_regression {
      expressions {
        factor {
          source: RESULT_BIT_COUNT
        }
      }
    }
  }
  specializations {
    kind: OPERANDS_IDENTICAL
    estimator {
      area_regression {
        expressions {
          factor {
            source: OPERAND_BIT_COUNT
            operand_number: 0
          }
        }
      }
    }
  }
}

op_models {
  op: "kUDiv"
  estimator {
    area_regression {
      expressions {
        factor {
          source: OPERAND_BIT_COUNT
        }
      }
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}
op_models { op: "kUMod" estimator { alias_op: "kUDiv" } }

op_models {
  op: "kSDiv"
  estimator {
    area_regression {
      expressions {
        factor {
          source: OPERAND_BIT_COUNT
        }
      }
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
        rhs_expression {
          factor {
            source: OPERAND_BIT_COUNT
          }
        }
      }
    }
  }
}
op_models { op: "kSMod" estimator { alias_op: "kSDiv" } }

op_models {
  op: "kShll"
  estimator {
    area_regression {
      expressions {
        factor {
          source: OPERAND_BIT_COUNT
          operand_number: 0
        }
      }
    }
  }
}
op_models { op: "kShrl" estimator { alias_op: "kShll" } }
op_models { op: "kShra" estimator { alias_op: "kShll" } }

op_models {
  op: "kDynamicBitSlice"
  estimator {
    area_regression {
      expressions {
        factor {
          source: OPERAND_BIT_COUNT
          operand_number: 0
        }
      }
      expressions {
        factor {
          source: OPERAND_BIT_COUNT
          operand_number: 1
        }
      }
    }
  }
}

op_models { op: "kBitSliceUpdate" estimator { alias_op: "kDynamicBitSlice" } }

op_models {
  op: "kOneHot"
  estimator {
    area_regression {
      expressions {
        factor {
          source: RESULT_BIT_COUNT
        }
      }
    }
  }
}

op_models {
  op: "kSLe"
  estimator {
    area_regression {
      expressions {
        factor { source: OPERAND_BIT_COUNT operand_number: 0 }
      }
    }
  }
}
op_models {
  op: "kSLt"
  estimator {
    area_regression {
      expressions {
        factor { source: OPERAND_BIT_COUNT operand_number: 0 }
      }
    }
  }
}
op_models {
  op: "kSGe"
  estimator {
    area_regression {
      expressions {
        factor { source: OPERAND_BIT_COUNT operand_number: 0 }
      }
    }
  }
}
op_models {
  op: "kSGt"
  estimator {
    area_regression {
      expressions {
        factor { source: OPERAND_BIT_COUNT operand_number: 0 }
      }
    }
  }
}
op_models { op: "kULe" estimator { alias_op: "kSLe" } }
op_models { op: "kULt" estimator { alias_op: "kSLt" } }
op_models { op: "kUGe" estimator { alias_op: "kSGe" } }
op_models { op: "kUGt" estimator { alias_op: "kSGt" } }

op_models {
  op: "kEq"
  estimator {
    area_regression {
      expressions {
        factor { source: OPERAND_BIT_COUNT operand_number: 0 }
      }
    }
  }
}
op_models { op: "kNe" estimator { alias_op: "kEq" } }

# TODO(tcal) is it better to use operand or result bit count?
op_models {
  op: "kDecode"
  estimator {
    area_regression {
      expressions {
        factor { source: RESULT_BIT_COUNT }
      }
    }
  }
}

op_models {
  op: "kArrayIndex"
  # Array index is basically a mux. The width of the mux is the result width,
  # and the fan-in factor of the mux is (flattened array width / result width).
  # We can't directly use operand 0's OPERAND_ELEMENT_COUNT, since we might be
  # indexing more than one step into a multidimensional array.
  estimator {
    area_regression {
      expressions: {
        factor {
          source: OPERAND_BIT_COUNT
          operand_number: 0
        }
      }
    }
  }
  specializations {
    # If the index is fully literal, this will compile down to pure wires.
    kind: HAS_LITERAL_OPERAND
    details {
      literal_operand_details {
        allowed_nonliteral_operand: 0
      }
    }
    estimator {
      fixed: 0
    }
  }
}

# Array update is basically a parallel set of 2-way MUX's, controlled by "is
# this the index being updated?" checks. Its delay should be roughly equivalent
# to an equality check with
#   width = lg(# elements in the array)
#         = lg(flattened array width / value width),
# plus (# elements in the array)-way fanout of the last index element, followed
# by a 2-way select with:
#   width = the element type's width = value width.
op_models {
  op: "kArrayUpdate"
  estimator {
    # The area of this op is strongly correlated to the total result bit count.
    # However, RESULT_BIT_COUNT only returns the width of one result element.
    # So, we have to rely on the fact that the output has the same shape as
    # the first operand to get the total result bit count.
    area_regression {
      expressions: {
        factor {
          source: OPERAND_BIT_COUNT
          operand_number: 0
        }
      }
    }
  }
  specializations {
    # If the index is fully literal, this will compile down to pure wires.
    kind: HAS_LITERAL_OPERAND
    details {
      literal_operand_details {
        allowed_nonliteral_operand: 0
        allowed_nonliteral_operand: 1
      }
    }
    estimator {
      fixed: 0
    }
  }
}

op_models { op: "kArraySlice" estimator { alias_op: "kArrayIndex" } }

op_models {
  op: "kOneHotSel"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: RESULT_BIT_COUNT
          }
        }
      }
    }
  }
}

op_models {
  op: "kPrioritySel"
  estimator {
    area_regression {
      expressions {
        bin_op: MULTIPLY
        lhs_expression {
          factor {
            source: OPERAND_COUNT
          }
        }
        rhs_expression {
          factor {
            source: RESULT_BIT_COUNT
          }
        }
      }
    }
  }
}

# "Free" ops.
op_models { op: "kBitSlice" estimator { fixed: 0 } }
op_models { op: "kArray" estimator { fixed: 0 } }
op_models { op: "kArrayConcat" estimator { fixed: 0 } }
op_models { op: "kConcat" estimator { fixed: 0 } }
op_models { op: "kLiteral" estimator { fixed: 0 } }
op_models { op: "kParam" estimator { fixed: 0 } }
op_models { op: "kStateRead" estimator { fixed: 0 } }
op_models { op: "kNext" estimator { fixed: 0 } }
op_models { op: "kReverse" estimator { fixed: 0 } }
op_models { op: "kTuple" estimator { fixed: 0 } }
op_models { op: "kTupleIndex" estimator { fixed: 0 } }
op_models { op: "kZeroExt" estimator { fixed: 0 } }
op_models { op: "kAssert" estimator { fixed: 0 } }
op_models { op: "kAfterAll" estimator { fixed: 0 } }
op_models { op: "kMinDelay" estimator { fixed: 0 } }
op_models { op: "kCover" estimator { fixed: 0 } }

op_models { op: "kReceive" estimator { fixed: 0 } }
op_models { op: "kSend" estimator { fixed: 0 } }
op_models { op: "kTrace" estimator { fixed: 0 } }

op_models { op: "kInputPort" estimator { fixed: 0 } }
op_models { op: "kOutputPort" estimator { fixed: 0 } }
op_models { op: "kRegisterRead" estimator { fixed: 0 } }
op_models { op: "kRegisterWrite" estimator { fixed: 0 } }
