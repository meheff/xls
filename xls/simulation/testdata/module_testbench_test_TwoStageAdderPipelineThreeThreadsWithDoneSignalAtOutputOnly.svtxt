module test_module(
  input wire clk,
  input wire reset,
  input wire [15:0] operand_0,
  input wire [15:0] operand_1,
  output wire [15:0] out
);
  wire [15:0] result;
  reg [15:0] p0;
  reg [15:0] p1;
  always @ (posedge clk) begin
    if (reset) begin end else begin
      p0 <= result;
      p1 <= p0;
    end
  end
  assign result = operand_0 + operand_1;
  assign out = p1;
endmodule


module testbench;
  reg clk;
  reg reset;
  reg [15:0] operand_0;
  reg [15:0] operand_1;
  wire [15:0] out;
  test_module dut (
    .clk(clk),
    .reset(reset),
    .operand_0(operand_0),
    .operand_1(operand_1),
    .out(out)
  );

  // Clock generator.
  initial begin
    clk = 0;
    forever #5 clk = !clk;
  end

  // Monitor for input/output ports.
  initial begin
    $display("Clock rises at 5, 15, 25, ....");
    $display("Signals driven one time unit after rising clock.");
    $display("Signals sampled one time unit before rising clock.");
    $display("Starting simulation. Monitor output:");
    $monitor("%t reset: %d operand_0: %d operand_1: %d out: %d", $time, reset, operand_0, operand_1, out);
  end

  // Thread `reset_controller`. Drives signals: reset
  reg __last_cycle_of_reset;
  initial begin
    reset = 1'h1;
    __last_cycle_of_reset = 1'h0;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    // Wait 4 cycle(s).
    repeat (3) begin
      @(posedge clk);
    end
    #1;
    @(posedge clk);
    #1;
    __last_cycle_of_reset = 1'h1;
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    __last_cycle_of_reset = 1'h0;
    reset = 1'h0;
  end

  // Thread `watchdog`. Drives signals: <none>
  initial begin
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    // Wait 10005 cycle(s).
    repeat (10004) begin
      @(posedge clk);
    end
    #1;
    @(posedge clk);
    #1;
    $display("ERROR: timeout, simulation ran too long (10000 cycles).");
    $finish;
  end

  // Thread `operand_0 driver`. Drives signals: operand_0
  initial begin
    operand_0 = 16'dx;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    // Wait for last cycle of reset
    #8;
    while (!(1'h1 && __last_cycle_of_reset == 1'h1)) begin
      #10;
    end
    @(posedge clk);
    #1;
    operand_0 = 16'h0021;
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    operand_0 = 16'h0032;
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    operand_0 = 16'h0080;
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    operand_0 = 16'dx;
  end

  // Thread `operand_1 driver`. Drives signals: operand_1
  initial begin
    operand_1 = 16'dx;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    // Wait for last cycle of reset
    #8;
    while (!(1'h1 && __last_cycle_of_reset == 1'h1)) begin
      #10;
    end
    @(posedge clk);
    #1;
    operand_1 = 16'h0021;
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    operand_1 = 16'h0032;
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    operand_1 = 16'h002a;
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    operand_1 = 16'dx;
  end

  // Thread `result capture`. Drives signals: <none>
  reg __thread_result_capture_done;
  initial begin
    __thread_result_capture_done = 1'h0;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    // Wait for last cycle of reset
    #8;
    while (!(1'h1 && __last_cycle_of_reset == 1'h1)) begin
      #10;
    end
    @(posedge clk);
    #1;
    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#0)", $time, out);
    @(posedge clk);
    #1;
    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#1)", $time, out);
    @(posedge clk);
    #1;
    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#2)", $time, out);
    @(posedge clk);
    #1;
    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#3)", $time, out);
    @(posedge clk);
    #1;
    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#4)", $time, out);
    @(posedge clk);
    #1;

    __thread_result_capture_done = 1'h1;
  end

  // Thread completion monitor.
  initial begin
    @(posedge clk);
    #9;
    while (!__thread_result_capture_done) begin
      @(posedge clk);
      #9;
    end
    @(posedge clk);
    #1;
    $finish;
  end
endmodule
