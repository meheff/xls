module test_module(
  input wire clk,
  input wire reset,
  input wire [15:0] in,
  output wire [15:0] out
);
  reg [15:0] p0;
  reg [15:0] p1;
  always @ (posedge clk) begin
    if (reset) begin
      p0 <= 16'h0000;
      p1 <= 16'h0000;
    end else begin
      p0 <= in;
      p1 <= p0;
    end
  end
  assign out = p1;
endmodule


module testbench;
  reg clk;
  reg reset;
  reg [15:0] in;
  wire [15:0] out;
  test_module dut (
    .clk(clk),
    .reset(reset),
    .in(in),
    .out(out)
  );

  // Clock generator.
  initial begin
    clk = 0;
    forever #5 clk = !clk;
  end

  // Monitor for input/output ports.
  initial begin
    $display("Clock rises at 5, 15, 25, ....");
    $display("Signals driven one time unit after rising clock.");
    $display("Signals sampled one time unit before rising clock.");
    $display("Starting simulation. Monitor output:");
    $monitor("%t reset: %d in: %d out: %d", $time, reset, in, out);
  end

  // Thread `watchdog`. Drives signals: <none>
  initial begin
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    // Wait 10000 cycle(s).
    repeat (9999) begin
      @(posedge clk);
    end
    #1;
    @(posedge clk);
    #1;
    $display("ERROR: timeout, simulation ran too long (10000 cycles).");
    $finish;
  end

  // Thread `input driver`. Drives signals: reset, in
  initial begin
    reset = 1'h1;
    in = 16'h0000;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    reset = 1'h0;
    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    while (1) begin
      in = 16'h0002;
      // Wait 1 cycle(s).
      @(posedge clk);
      #1;
      in = 16'h0003;
      // Wait 1 cycle(s).
      @(posedge clk);
      #1;
    end
  end

  // Thread `output capture`. Drives signals: <none>
  reg __thread_output_capture_done;
  initial begin
    __thread_output_capture_done = 1'h0;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;
    repeat (10) begin
      // Wait 1 cycle(s).
      #8;
      $display("%t OUTPUT out = 16'h%0x (#0)", $time, out);
      @(posedge clk);
      #1;
    end

    __thread_output_capture_done = 1'h1;
  end

  // Thread completion monitor.
  initial begin
    @(posedge clk);
    #9;
    while (!__thread_output_capture_done) begin
      @(posedge clk);
      #9;
    end
    @(posedge clk);
    #1;
    $finish;
  end
endmodule
