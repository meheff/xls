package test

proc my_proc<in_ch: bits[32] in, out_ch: bits[32] out>(my_token: token, my_state: bits[32], init={token, 42}) {
  chan_interface in_ch(direction=receive, kind=streaming, strictness=proven_mutually_exclusive, flow_control=none, flop_kind=none)
  chan_interface out_ch(direction=send, kind=streaming, flow_control=ready_valid, flop_kind=skid)
  my_token: token = state_read(state_element=my_token, id=7)
  my_state: bits[32] = state_read(state_element=my_state, id=8)
  send.1: token = send(my_token, my_state, channel=out_ch, id=1)
  literal.2: bits[1] = literal(value=1, id=2)
  receive.3: (token, bits[32]) = receive(send.1, predicate=literal.2, channel=in_ch, id=3)
  tuple_index.4: token = tuple_index(receive.3, index=0, id=4)
  next_value.13: () = next_value(param=my_token, value=tuple_index.4, id=13)
  next_value.14: () = next_value(param=my_state, value=my_state, id=14)
}
